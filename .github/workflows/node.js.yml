# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main","feature/multi-o1js" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        o1js-version: [v0.10.0,v0.10.1,v0.11.0,v0.11.1,v0.11.2,v0.11.3,v0.11.4,v0.12.1,v0.12.2,v0.14.0,v0.14.3,v0.15.0,v0.15.1,v0.15.2,v0.15.3,v0.15.4,v0.16.0,v0.16.1,v0.16.2,v0.17.0,v0.18.0,v0.2.0,v0.2.2,v0.3.4,v0.3.7,v0.5.3,v0.5.4,v0.6.0,v0.7.0,v0.7.2,v0.7.3,v0.8.0,v0.9.0,v0.9.1,v0.9.2,v0.9.5,v0.9.7,v0.9.8,v1.0.0,v1.0.1,v1.1.0,v1.2.0, v1.3.0]
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: meta-introspector/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: meta-introspector/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    # replace the version number
    - run: sed -e's!O1JSVERSION!${{ matrix.o1js-version }}' package.json.template> package.json
    - run: cp test-env.json  env.json 
    - run: npm ci
    - run: npm run build --if-present
    - run: |
        export NODE_OPTIONS="--prof"
        npm test
        
    - run: |
        export NODE_OPTIONS="--prof --heap-prof"
        npm test

#NODE_ENV=production node --prof
#
